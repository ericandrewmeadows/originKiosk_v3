CREATE DATABASE snackblendKiosk;

CREATE TABLE userInfo (
	customerId BIGINT NOT NULL AUTO_INCREMENT,
	phoneNumber BIGINT,
	firstName TEXT,
	lastName TEXT,
	last4 INT,
	brand TEXT,
	funding TEXT,
	expMonth TINYINT,
	expYear SMALLINT,
	token TEXT,
	PRIMARY KEY ( customerId )
);

// machineId - company who is providing the discount
CREATE TABLE discount_companySpecific (
	customerId BIGINT,
	machineId MEDIUMINT,
	smoothiePrice FLOAT(4,2),
	PRIMARY KEY ( customerId )
);

refer a friend - get a free smoothie, they get a free smoothie once redeemed by friend.
going to need to do a select query to see if a customerId is present.  this allows for international nubers













// phoneNumber, firstName, lastName, last4, expMonth, expYear <-- All come from "userInfo"
// thresholdConfig <-- [thresholdConfig] (thresholdConfig)
// verify:  PIN <-- [pinCode] (pinHash)
// machineId <-- [machineInfo] (machineId)
// machineId is used to match the company name for the subscription validation [machineInfo table]

// search userInfo for the record
// if customer has not presence in userInfo --> create new customer & subscription      {progression1} -> {progression2}
// elseif customerId in userInfo / not in subscription --> create new subscription      {progression2}
// else --> proceed																		{progression3}
// when time hits renew date

CREATE TABLE userSubscription_details (
	customerId BIGINT NOT NULL,
	items_remaining TINYINT,
	items_renewLevel TINYINT,
	items_type TINYINT,
	items_consumed_all INT,
	startDate DATETIME,
	renewDate DATETIME,
	thresholdConfig INT,
	active TINYINT,
	machineId MEDIUMINT,
	PRIMARY KEY (customerId)
);

// {progression1}
// Old methods need to check first before inserting
// All of these methods come from the existing method for creating a user
// First Name & Last Name <-- Swipe
// Exp Month & Exp Year <-- Swipe
INSERT INTO
	userInfo
	(phoneNumber, firstName, lastName, last4, brand, funding, expMonth, expYear, token)
VALUES
	(0000000000, "Test", "Name", 9999, "Visa", "credit", 11, 2222, "cus_XXXXXXXXXXXXXX");



// {progression2}
// Times will be stored in relation to GMT
INSERT INTO
	userSubscription_details
	(customerId,
	 items_remaining, items_type, items_consumed_all,
	 startDate, renewDate,
	 thresholdConfig, active,
	 machineId)
VALUES
	((SELECT customerId FROM userInfo WHERE phoneNumber = 9377761657),
	 3, 1, 0,
	 '2017-01-31 15:00', '2017-01-31 15:00',
	 (SELECT thresholdConfig FROM thresholdConfig WHERE thresholdType = "Weekly"), 1,
	 (SELECT machineId FROM machineInfo WHERE Company = "WeWork Civic Center"));

///phoneNumber, subscribeAmt, subscriptionPrice, enrollDate, renewDate, active

CREATE TABLE subscriberInfo (
	phoneNumber BIGINT NOT NULL,
	subscribeAmt FLOAT(4,2) NOT NULL,
	subscriptionPrice FLOAT(4,2) NOT NULL,
	enrollDate DATETIME,
	renewDate DATETIME,
	active TINYINT,
	PRIMARY KEY (phoneNumber)
);










// subSmoothie<X>_price is $$/smoothie, not $$ = X smoothies
CREATE TABLE subscriptionInfo (
	machineId MEDIUMINT,
	subSmoothie1_count TINYINT,
	subSmoothie1_price FLOAT(4,2),
	subSmoothie2_count TINYINT,
	subSmoothie2_price FLOAT(4,2),
	subSmoothie3_count TINYINT,
	subSmoothie3_price FLOAT(4,2),
	PRIMARY KEY ( machineId )
);

CREATE TABLE subscriptionItems_details (
	items_type TINYINT NOT NULL AUTO_INCREMENT,
	items_text TEXT,
	PRIMARY KEY (items_type)
);
INSERT INTO
	subscriptionItems_details
	(items_text)
VALUES
	("Smoothies")
;

CREATE TABLE pinCode (
	phoneNumber BIGINT,
	pinHash TEXT,
	PRIMARY KEY ( phoneNumber )
);








// To get "WeWork" out, we can take the first work of the returned result - split by " ", then select the first array element
// SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(company, ' ', 1), ' ', -1) FROM machineInfo WHERE machineId = 13;

INSERT INTO
	machineInfo
	(company, addressLine1_shipping, city_shipping, state_shipping, zipCode_shipping, addressLine1_billing, city_billing, state_billing, zipCode_billing)
VALUES
	("WeWork Civic Center", "1161 Mission St", "San Francisco", "CA", 94103, "1161 Mission St", "San Francisco", "CA", 94103)
;
INSERT INTO
	subscriptionInfo
	(machineId,
	subSmoothie1_count, subSmoothie1_price, subSmoothie2_count, subSmoothie2_price)
VALUES
	((SELECT machineId FROM machineInfo WHERE company = "WeWork Civic Center"),
	 3, 4.99, 5, 4.79)
;





CREATE TABLE userDashboard (
	machineIdHashed MEDIUMINT,
	passHash TEXT,
	PRIMARY KEY ( machineId )
);



CREATE TABLE discount (
	phoneNumber BIGINT,
	price FLOAT(4,2),
	quantity INT,
	authorizer TEXT,
	PRIMARY KEY ( phoneNumber )
);

CREATE TABLE chargeInfo (
	chargeId BIGINT NOT NULL AUTO_INCREMENT,
	customerId BIGINT,
	machineId MEDIUMINT,
	chargeAmount NUMERIC(8,2),
	PRIMARY KEY ( chargeId )
);

CREATE TABLE machineInfo (
	machineId MEDIUMINT NOT NULL AUTO_INCREMENT,
	company TEXT,
	paymentSystem INT,
	addressLine1_shipping TEXT,
	addressLine2_shipping TEXT,
	city_shipping TEXT,
	state_shipping CHAR(2),
	zipCode_shipping MEDIUMINT,
	addressLine1_billing TEXT,
	addressLine2_billing TEXT,
	city_billing TEXT,
	state_billing CHAR(2),
	zipCode_billing MEDIUMINT,
	contactName TEXT,
	contactEmail TEXT,
	contactPhone BIGINT,
	PRIMARY KEY ( machineId )
);

ALTER TABLE machineInfo
ADD lockInstalled INT after `paymentSystem `;

CREATE TABLE deliveryInfo (
	deliveryId BIGINT NOT NULL AUTO_INCREMENT,
	company TEXT,
	podCount INT,
	date DATE,
	PRIMARY KEY ( deliveryId )
);


INSERT INTO
	machineInfo
	(company, addressLine1, addressLine2, city, state, zipCode)
VALUES
	("Nominum", "800 Bridge Pkwy", "#100", "Palo Alto","CA",94065)
;




CREATE TABLE company_subsidyStipend (
	subsidyStipendId BIGINT NOT NULL AUTO_INCREMENT,
	company TEXT,
	employeeThresh BIT(1),
	thresholdConfig INT,
	threshold1 INT,
	price1 FLOAT(4,2),
	threshold2 INT,
	price2 FLOAT(4,2),
	PRIMARY KEY ( subsidyStipendId )
);

INSERT INTO
	machineInfo
	(company, addressLine1_shipping, city_shipping, state_shipping, zipCode_shipping, addressLine1_billing, city_billing, state_billing, zipCode_billing)
VALUES
	("CareDx", "3260 Bayshore Blvd", "Brisbane","CA", 94005, "3260 Bayshore Blvd", "Brisbane","CA", 94005)
;
INSERT INTO
	company_subsidyStipend
	(company, employeeThresh, thresholdConfig, threshold1, price1, threshold2, price2)
VALUES
	("Actiance", 0, 1, 0, 2.49, 0, 2.49)
;
CREATE TABLE thresholdConfig (
	thresholdConfig INT NOT NULL,
	thresholdType TEXT,
	PRIMARY KEY ( thresholdConfig )
);
INSERT INTO
	thresholdConfig
	(thresholdConfig, thresholdType)
VALUES
	(1, "Monthly")
;
INSERT INTO
	thresholdConfig
	(thresholdConfig, thresholdType)
VALUES
	(2, "Weekly")
;

INSERT INTO
	company_subsidyStipend
	(company, employeeThresh, thresholdConfig, threshold1, price1, threshold2, price2)
VALUES
	("CareDx", 0, 1, 0, 2.99, 0, 2.99)
;




